<doc>
,(module tria (import (tri "tria.scm")))
,(define dir (dirname (the-loading-file)))
,(define (test t) (let* ((t (sort trisort (normalize t)))
			 (d (decompose t))
			 (l (length d)))
`(,(eval `(<SVG> height: 100  width: 100
   ,(apply tri->svg ?: t)))
"="
 ,(eval `(<SVG> height: 100  width: 100
   ,@(map (lambda (x) (apply tri->svg x))
	(take (reverse d) l)
	)))
  )))
,(define (read-model f) (with-input-from-file f (delay
 (let loop ((ts '()))
    (let* ((p1 (read))
	   (_ (read-char))
	   (p2 (read))
	   (_ (read-char))
	   (p3 (read)))
      (if (eof-object? p1) (reverse ts)
	  (loop (cons (map string->point `(,p1 ,p2 ,p3)) ts))
      ))
   ))))

== Erik's triangle puzzle

~~ DIVs: ,(<DIV> style: "height:500px; width:500px;") 

,(map (lambda (x) (eval (apply tri->div 0 0 x)))
    (reverse (normalizes (fold append '()
      (map decompose
	(map (lambda (x) (sort trisort x))
	   (read-model "TweakedPot.txt")))
      ))))


  ,(map (lambda (x) (eval (apply tri->div 0 0 x)))
    (normalizes (append
       (decompose (sort trisort
         `((0 0) (10 10) (5 3))))
       (decompose (sort trisort
         `((0 0) (-10 10) (-5 3))))
       )))

   ,(map (lambda (x) (eval (apply tri->div x)))
    (normalizes (list
        (translate 0 2 (car (decompose `((0 .5) (1 .5) (0 0)))))
	(translate 1 2 (car (decompose `((0 1) (1 1) (0.75 0)))))
        (translate 2 2 (car (decompose `((0 1) (.5 1) (.5 0)))))
	(translate 0 1 (car (decompose `((0 .4) (0 0) (1 0)))))
	(translate 1 1 (car (decompose `((0.15 1) (0 0) (1 0)))))
	(translate 2 1 (car (decompose `((1 .3) (0 0) (1 0)))))
	(translate 0 0 (car (decompose `((0 1) (.4 0.5) (0 0)))))
	(translate 1 0 (car (decompose `((1 1) (0 0.5) (1 0)))))
	))
  )

~~
  * one
  * two
  * three

=== Old SVG-based stuff...

,(map test (read-model "tri.txt"))

== Playground

,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid transparent; border-right: 60px solid transparent; border-left: 130px solid red; position: absolute; left: 400px; top: 1800px")

~~ Some DIV tests...
,(<DIV> style: "width: 0; height: 0; border-top: 50px solid green; border-bottom: 50px solid transparent; border-right: 10px solid transparent; border-left: 10px solid green;")
,(<DIV> style: "width: 0; height: 0; border-top: 60px solid green; border-bottom: 60px solid transparent; border-right: 60px solid green; border-left: 60px solid transparent;")
~~
,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid green; border-right: 60px solid transparent; border-left: 60px solid green;")
,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid green; border-right: 60px solid green; border-left: 60px solid transparent;")
~~
,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid transparent; border-right: 60px solid transparent; border-left: 60px solid green;")
 ,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid transparent; border-right: 60px solid green; border-left: 60px solid transparent;")
~~
 ,(<DIV> style: "width: 0; height: 0; border-top: 60px solid transparent; border-bottom: 60px solid green; border-right: 60px solid transparent; border-left: 60px solid transparent;")
~~
 ,(<DIV> style: "width: 0; height: 0; border-top: 60px solid green; border-bottom: 60px solid transparent; border-right: 60px solid transparent; border-left: 60px solid transparent;")


~~ Some SVG tests...

 ,(<SVG> ;height: 100
	 width: 100
	 ;viewBox: "0 0 100 100"
	 (eval (tri->svg ?: '(0 0) '(1 1) '(1 0))))
 ,(<SVG> ;height: 100
	 width: 100
	 ;viewBox: "0 0 100 100"
	 (eval (tri->svg ?: '(0 0) '(1 1) '(0 1))))
 ,(<SVG> ;height: 100
	 width: 100
	 ;viewBox: "0 0 100 100"
	 (eval (tri->svg ?: '(0 0) '(1 1) '(.5 .3))))

,(eval `(<SVG> ;height: 100
  width: 100
  ;viewBox: "0 0 100 100"
  ,@(map (lambda (x) (apply tri->svg x))
       (take '((?: (0 0) (1 1) (1 0))
	       (?: (0 0) (1 1) (0 1))) 2))
  ))

~~
,(test '((0 0) (1 1) (.5 .2)))

~~
,(test '((0 0) (1 -1) (.5 0)))
,(test '((0 0) (-1 -1) (-.5 0)))

~~
,(test '((0 0) (1 1) (.5 0)))
,(test '((0 0) (-1 1) (-.5 0)))

~~
,(test '((0 0) (1 0) (0 1)))
,(test '((0 0) (1 .5) (0 1)))

~~
,(test '((0 1) (1 1) (0 .5)))
,(test '((0 1) (1 1) (.5 .5)))

~~
,(test '((0 0) (1 0) (1 1)))
,(test '((0 0) (2 0) (1 1)))

~~
,(test '((9 10) (10 10) (10 9)))
,(test '((9 9.5) (10 10) (10 9)))


</doc>
